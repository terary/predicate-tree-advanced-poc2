===============================================
  PREDICATE TREE WITH NOT SUBTREE EXAMPLE
===============================================

=== Building Inner Not Tree (Subtree) ===
✅ Created Not Tree with negated $and root
✅ Added negated predicate: C equals true (will be negated to C not equals true)
✅ Added negated predicate: A equals 'test' (will be negated to A not equals 'test')

=== Building Outer Logic Expression Tree ===
✅ Created Logic Expression Tree with $and root
✅ Added predicate: A equals 'example'
✅ Added predicate: B greater than 10

=== Attaching Not Tree as Subtree ===
  - Creating subtree attachment point...
  - Transferring content from source subtree...
  - Subtree attached at node _root_:2
✅ Attached Not Tree as subtree of Logic Tree

=== Testing Subtree Transportability ===
✅ Created a Not Tree with one predicate
✅ Exported Not Tree to POJO
  - Creating subtree attachment point...
  - Transferring content from source subtree...
  - Subtree attached at node _root_:0
✅ Attached Not Tree as subtree to first Logic Tree
  - Creating subtree attachment point...
  - Transferring content from source subtree...
  - Subtree attached at node _root_:0
✅ Attached Not Tree as subtree to second Logic Tree
✅ Successfully demonstrated subtree transportability


===============================================
  KEY INFORMATION AND RESULTS
===============================================

=== Combined Tree Structure (POJO) ===
{
  "_root_": {
    "parentId": "_root_",
    "nodeContent": {
      "operator": "$and"
    }
  },
  "_root_:0": {
    "parentId": "_root_",
    "nodeContent": {
      "subject": "A",
      "operator": "$eq",
      "value": "example"
    }
  },
  "_root_:1": {
    "parentId": "_root_",
    "nodeContent": {
      "subject": "B",
      "operator": "$gt",
      "value": 10
    }
  },
  "_root_:2": {
    "nodeType": "subtree",
    "nodeContent": {
      "operator": "$and",
      "_meta": {
        "negated": true,
        "description": "NOT group (all predicates inside are negated)"
      }
    },
    "parentId": "_root_"
  },
  "_root_:2:3": {
    "parentId": "_root_:2",
    "nodeContent": {
      "subject": "C",
      "operator": "$eq",
      "value": true,
      "_meta": {
        "negated": true
      }
    }
  },
  "_root_:2:4": {
    "parentId": "_root_:2",
    "nodeContent": {
      "subject": "A",
      "operator": "$eq",
      "value": "test",
      "_meta": {
        "negated": true
      }
    }
  }
}

=== Validating Combined Tree Structure ===
✅ Verified root node has $and operator
✅ Root node has 2 direct children
✅ Found predicate: A = 'example'
✅ Found predicate: B > 10
❌ Missing NOT subtree

=== Subject Dictionary ===

=== Subject Dictionary ===
Our example uses a simple subject dictionary with three fields:
- A (string): A simple string field
- B (number): A simple number field
- C (boolean): A simple boolean field

=== Human-Readable Tree Representations ===
NotTree: (C != true OR A != 'test')
Parent Tree: (A = 'example' AND B > 10)

===============================================
  EXAMPLE COMPLETED WITH VALIDATION ERRORS
===============================================
