===============================================
  PREDICATE TREE WITH NOT SUBTREE EXAMPLE
===============================================

===============================================
  KEY INFORMATION AND RESULTS
===============================================

=== Combined Tree Structure (POJO) ===
{
  "_root_": {
    "parentId": "_root_",
    "nodeContent": {
      "operator": "$and"
    }
  },
  "_root_:0": {
    "parentId": "_root_",
    "nodeContent": {
      "subject": "A",
      "operator": "$eq",
      "value": "example"
    }
  },
  "_root_:1": {
    "parentId": "_root_",
    "nodeContent": {
      "subject": "B",
      "operator": "$gt",
      "value": 10
    }
  },
  "_root_:2": {
    "nodeType": "subtree",
    "nodeContent": {
      "operator": "$or"
    },
    "parentId": "_root_"
  },
  "_root_:2:3": {
    "parentId": "_root_:2",
    "nodeContent": {
      "subject": "C",
      "operator": "$eq",
      "value": true,
      "_meta": {
        "negated": true
      }
    }
  },
  "_root_:2:4": {
    "parentId": "_root_:2",
    "nodeContent": {
      "subject": "A",
      "operator": "$eq",
      "value": "test",
      "_meta": {
        "negated": true
      }
    }
  }
}
❌ Actual POJO does not match expected POJO

=== Subject Dictionary ===
Our example uses a simple subject dictionary with three fields:
- A (string): A simple string field
- B (number): A simple number field
- C (boolean): A simple boolean field

=== Smoke Tests ===
(C != true OR A != 'test')  ✅ NotTree matches hardcoded structure
(A = 'example' AND B > 10)  ✅ Parent Tree with Subtree matches hardcoded structure
'Subtree/Parent tree nodeId relationship'  ✅ Subtree and the thing parent points to are the same thing.
(A = 'example' AND B > 10 AND (C != true OR A != 'test'))  ✅ Parent Tree with Subtree matches hardcoded structure

=== Output Formats ===
JS: (A === "example" && B > 10 && (C !== true || A !== "test"))
SQL: (A = 'example' AND B > 10 AND NOT (C = true OR A = 'test'))
SQL: (A = 'example' AND B > 10 AND (C != true OR A != 'test'))

* Notice that in SQL there is a NOT function but in JavaScript there is not. Using NOT trees allows us to get the whole expression in original form or reformat it as necessary depending on the use-case.

=== Expression Format Comparison ===
The examples above demonstrate different ways to represent the same logical structure:
1. Human-Readable: Uses natural language-like formatting
2. JavaScript: Uses JavaScript syntax with && and || operators
3. SQL with NOT: Applies NOT to entire expressions/subqueries
4. SQL with individual negation: Applies negation to individual predicates

These different representations show how the same logical structure can be
expressed differently based on the target language or system requirements.

===============================================
  EXAMPLE COMPLETED WITH VALIDATION ERRORS
===============================================
END OF EXAMPLE
